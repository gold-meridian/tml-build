<Project>
    <UsingTask TaskName="TMLVersionTask" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <TMLBuildPath ParameterType="System.String" Required="true"/>
            <Version ParameterType="System.String" Required="true"/>
            <TargetsPath ParameterType="System.String" Required="true"/>
        </ParameterGroup>
        <Task>
            <Using Namespace="System"/>
            <Using Namespace="System.IO"/>
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                
                Log.LogMessage("Using tML version (unparsed): {0}", Version);
                
                var process = new System.Diagnostics.Process();
                process.StartInfo.FileName = TMLBuildPath;
                process.StartInfo.Arguments = $"version download {Version}";
                process.StartInfo.RedirectStandardOutput = true;
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.CreateNoWindow = true;
                process.Start();
                process.WaitForExit();
                
                // check if the process exited with a non-zero exit code
                if (process.ExitCode != 0)
                {
                    Log.LogError("Failed to download tML version {0}.", Version);
                    return false;
                }
                
                process.StartInfo.Arguments = $"version path {Version}";
                process.Start();
                string path = process.StandardOutput.ReadToEnd().Trim();
                process.WaitForExit();
                
                if (process.ExitCode != 0)
                {
                    Log.LogError("Failed to get the path of tML version {0}.", Version);
                    return false;
                }
                
                Log.LogMessage("Got tML version path: {0}", path);
                
                var targetsCandidates = new string[]
                {
                    Path.Combine(path, "tMLMod.targets"),
                    Path.Combine(path, "Build", "tMLMod.targets"),
                };
                
                var targets = targetsCandidates.FirstOrDefault(File.Exists);
                if (targets == null)
                {
                    Log.LogError("Failed to find tML targets file in {0}.", path);
                    return false;
                }
                
                // write a dummy targets file that imports the real targets file
                Directory.CreateDirectory(Path.GetDirectoryName(TargetsPath));
                Log.LogMessage(TargetsPath);
                File.WriteAllText(TargetsPath,
$@"<Project>
    <Import Project=""{targets}""/>
</Project>");
]]>
            </Code>
        </Task>
    </UsingTask>
</Project>